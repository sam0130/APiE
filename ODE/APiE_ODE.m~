clc; clear variables; close all;
%% Constants
global m k gamma f omega
m = 2;                              % mass;   
k = 5;                              % spring   
gamma = 0.0;                        % friction parameter
f = 0;                              % force amplitude
omega = 0;                          % for

omg = (k/m)^0.5;                    % frequency
T_period = 2*pi/omg;

n = 10;                             % No. of cycles
T = n*T_period;                     % Total time
N = 10000;                          % No. of time steps    
DeltaT = T/N;
t = 0:DeltaT:T;
%% Exact Solution
x_anal = @(t) cos(omg*t) + (1/omg)*sin(omg*t);             
v_anal = @(t) -omg*sin(omg*t) + cos(omg*t);
A = sqrt(1+1/omg^2);                           % Amplitude
%% Euler Algorithm
x = zeros(length(t),1);         
v = zeros(length(t),1);
x(1) = 1;                       
v(1) = 1;              

for i = 1:(length(t)-1)
    x(i+1) = x(i) + DeltaT*v(i);
    v(i+1) = v(i) + (-k*x(i))/m * DeltaT;
end

[ kin_exact, pot_exact, tot_exact] = calcEnergy(x_anal(t),v_anal(t));
[ kin_euler, pot_euler, tot_euler ] = calcEnergy(x,v);

figure()
hold on
plot(t,x)
plot(t, x_anal(t))
xlabel('Time (s)')
ylabel('Displacement (m)')
title('Euler vs Exact')
legend('Numerical', 'Exact')

figure()
hold on
plot(t,pot_euler);
plot(t,kin_euler);
plot(t,tot_euler);
plot(t,tot_exact);
legend('PE_{num}','KE_{num}','Tot_{num}','Tot_{exact}')
xlabel('Time (s)')
ylabel('Energy (J)')
title('Euler vs Exact')
%% Verlet Leapfrog Algorithm
% w leap-frogs
% v_leap corrects the w by taking average of -1/2 and +1/2 velocity

x_leap = zeros(length(t),1); 
w = zeros(length(t),1);                      % 1/2 velocities
v_leap = zeros(length(t),1);                 % Corrected velocity 

x_leap(1) = 1;       

w(1) = 1 - 0.5*DeltaT*(-k*x_leap(1))/m;      % Euler step for -1/2 velocity        
for i = 1:(length(t)-1)
    w(i+1) = w(i) + DeltaT*(-k*x_leap(i))/m;    
    x_leap(i+1) = x_leap(i) + DeltaT*w(i+1);
    v_leap(i) = 0.5 * (w(i+1) + w(i));
end
v_leap(end) = w(end) + 0.5*DeltaT*(-k* (x_leap(end)))/m;

[ kin_verlet_w, pot_verlet_w, tot_verlet_w] = calcEnergy(x_leap, w);    % Energies using the leap frogging velocities
[ kin_verlet, pot_verlet, tot_verlet] = calcEnergy(x_leap, v_leap);     % Energies using corrected velocities

figure()
hold on
plot(t,x_leap)
plot(t, x_anal(t))
xlabel('Time (s)')
ylabel('Displacement (m)')
title('Verlet Leapfrog vs Exact')
legend('Numerical', 'Exact')

figure()
hold on
plot(t,pot_verlet);
plot(t,kin_verlet);
plot(t,tot_verlet);
plot(t,tot_exact);
legend('PE_{num}','KE_{num}','Tot_{num}','Tot_{exact}')
xlabel('Time (s)')
ylabel('Energy (J)')
title('Verlet Leapfrog (corrected) vs Exact')

figure()
hold on
plot(t,tot_verlet)
plot(t,tot_verlet_w,'k--')
plot(t, tot_exact)
legend('Verlet Corrected','Verlet LeapFrogging','Exact')
xlabel('Time (s)')
ylabel('Energy (J)')
title('Comparison of corrected and normal Verlet leapfrog')
%% ODE45
x0 = [1 1];                                            % initial conditions
tspan = [0; T];
[t_ode, xy_ode45] = ode45(@harmOscill, 0:0.05:tspan(2), x0);
figure()
hold on
plot(t_ode, xy_ode45(:,1));
plot(t, x(:,1));

[ kin_ode45, pot_ode45, tot_ode45] = calcEnergy(xy_ode45(:,1), xy_ode45(:,2)); 

figure()
hold on
plot(t_ode,pot_ode45);
plot(t_ode,kin_ode45);
plot(t_ode,tot_ode45);
plot(t,tot_exact);
legend('PE_{num}','KE_{num}','Tot_{num}','Tot_{exact}')
xlabel('Time (s)')
ylabel('Energy (J)')
title('ode45 Vs Exact')
%% comparing energies
figure()
hold on
plot(t,total_euler)
plot(t_ode,total_ode45,'k*');
plot(t,total_leap_avg)
plot(t, tot_exact)
legend('Euler','ODE45','Leapfrog','Exact')
%% Friction using Leapfrog
x_leap = zeros(length(t),1);         w = zeros(length(t),1);

x_leap(1) = 1;       
w(1) = (1 - 0.5*DeltaT*(-k*x_leap(1))/m )/(1 - (gamma/m*DeltaT/2));        % leapfrog 1/2 velocity         
for i = 1:(length(t)-1)
    w(i+1) = w(i) + DeltaT*(-k*x_leap(i))/m - gamma*w(i)*DeltaT/m ;
    x_leap(i+1) = x_leap(i) + DeltaT*w(i+1);
end

figure()
hold on
plot(t,x_leap)

v_leap = zeros(length(t),1);
for i = 1:length(t)-1
    v_leap(i) = 0.5 * (w(i+1) + w(i));
end
v_leap(end) = w(end) + 0.5*DeltaT*(-k*(x_leap(end)))/m - gamma*w(i)*0.5*DeltaT/m;

pot = 0.5*k*x_leap.^2;
kin = 0.5*m*v_leap.^2;
tot_numerical = pot + kin;
total_leap_avg = tot_numerical;

figure()
hold on
plot(t,pot);
plot(t,kin);
plot(t,tot_numerical);
plot(t,tot_exact);
legend('potential_{numerical}','kinetic_{numerical}','total_{numerical}','total_{exact}')
%% Force using ODE
x0 = [1 1];                             % initial conditions
tspan = [0; T];
[t_ode, xy_ode45] = ode45(@harmOscill_fric_force, tspan, x0);
figure()
plot(t_ode, xy_ode45(:,1));
